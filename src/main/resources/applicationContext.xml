<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
		
	<!-- this is required to read property passwordInPropertiesFile (in app.properties) in UserRepositoryImpl.java class -->
	<!-- if this element is not specified, value of property passwordInPropertiesFile (in app.properties) would be read in as null in UserRepositoryImpl.java class -->
	<context:annotation-config />
		
	<!-- properties file -->
	<context:property-placeholder location="app.properties"/>

	<!-- ======== START : ref based XML configuration ======== -->
	<!-- using property -->
	<bean name="userService"
		class="com.ms.springxmlconfig.service.UserServiceImpl">
		<!-- use <property> element for setter injection -->
		<!-- property name (defined in UserServiceImpl class) must match the setter method name for UserRepository -->
		<property name="userRepository" ref="userRepository" />
	</bean>

	<bean name="userRepository"
		class="com.ms.springxmlconfig.repository.UserRepositoryImpl">
		
		<!-- reading property from properties file app.properties defined above -->
		<!-- value of value element (denoted by ${}) is the key in properties file -->
		<property name="usernameInJavaClass" value="${usernameInPropertiesFile}" />
		
	</bean>


	<!-- using constructor -->
	<bean name="adminService"
		class="com.ms.springxmlconfig.service.AdminServiceImpl">
		<!-- use <constructor-arg> element for constructor injection -->
		<constructor-arg index="0" ref="adminRepository" />
	</bean>

	<bean name="adminRepository"
		class="com.ms.springxmlconfig.repository.AdminRepositoryImpl" />
	<!-- ======== END : ref based XML configuration ======== -->




	<!-- ======== START : XML configuration with Autowire using constructor ======== -->
	<!-- note that the value of name attribute (guestServ in this case) must match argument value in appContext.getBean(...) method -->
	<bean name="guestServ"
		class="com.ms.springxmlconfig.service.GuestServiceImpl"
		autowire="constructor" />

	<bean name="guestRepo"
		class="com.ms.springxmlconfig.repository.GuestRepositoryImpl" />
	<!-- ======== END : XML configuration with Autowire using constructor ======== -->




	<!-- ======== START : XML configuration with Autowire using byType ======== -->
		<!-- byType does not have to match name - you could change bean name="guestPassRepository" to bean name="guestFoo" and it will still work.
			it will not work here because there is another bean inside byName section that refers to guestPassRepository byName -->
	<bean name="guestService"
		class="com.ms.springxmlconfig.service.GuestServiceImpl"
		autowire="byType" />

	<bean name="guestPassRepository"
		class="com.ms.springxmlconfig.repository.GuestPassRepositoryImpl" />
	
	
	<!-- ######## START : Uncomment bean definition (bean name="guestPassRepositoryDuplicate") 
		to see 'No qualifying bean of type...' issue (stacktrace except below) - when byType is used and two beans of the same type are found ######## -->
	
		<!-- WARNING: Exception encountered during context initialization - 
			cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: 
			Error creating bean with name 'guestService' defined in class path resource [applicationContext.xml]: 
			Unsatisfied dependency expressed through bean property 'guestPassRepository'; 
			nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: 
			No qualifying bean of type 'com.ms.springxmlconfig.repository.GuestPassRepository' available: 
			expected single matching bean but found 2: guestPassRepository,guestPassRepositoryDuplicate
			
			Exception in thread "main" org.springframework.beans.factory.UnsatisfiedDependencyException: 
			Error creating bean with name 'guestService' defined in class path resource [applicationContext.xml]: 
			Unsatisfied dependency expressed through bean property 'guestPassRepository'; 
			nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: 
			No qualifying bean of type 'com.ms.springxmlconfig.repository.GuestPassRepository' available: 
			expected single matching bean but found 2: guestPassRepository,guestPassRepositoryDuplicate -->
			
	<!-- ######## END : Uncomment bean definition (bean name="guestPassRepositoryDuplicate") 
		to see 'No qualifying bean of type...' issue (stacktrace except below) - when byType is used and two beans of the same type are found ######## -->
	
	<!-- <bean name="guestPassRepositoryDuplicate"
		class="com.ms.springxmlconfig.repository.GuestPassRepositoryImpl" /> -->
	<!-- ======== END : XML configuration with Autowire using byType ======== -->
	
	
	
	<!-- ======== START : XML configuration with Autowire using byName ======== -->
	
		<!-- name of setter for guestPassRepository must match bean name in applicationContext.xml file, else a NPE will be thrown; 
			e.g. if setGuestPassRepository in GuestServiceImpl is changed to setGuestPassRepository1, bean name must be changed 
			from 'bean name="guestPassRepository"' to 'bean name="guestPassRepository1"' or else byName would fail and a NPE will be thrown. 
		
			Similarly, if bean 'bean name="guestPassRepository"' is changed to 'bean name="guestPassRepository1"' then the setter inside 
			GuestServiceImplmust be changed from setGuestPassRepository to setGuestPassRepository1 or else a NPE will be thrown. 
		
			This is because when using byName, Spring looks for the exact name. -->
			
	<bean name="guestServiceByName"
		class="com.ms.springxmlconfig.service.GuestServiceImpl"
		autowire="byName" />
	<!-- ======== END : XML configuration with Autowire using byName ======== -->

</beans>
